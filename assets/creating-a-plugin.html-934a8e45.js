import{_ as p,r as o,o as c,c as l,a as s,b as n,d as t,e}from"./app-6869e31e.js";const i="/StreamCompanion/assets/VSCreateItem-8f47a80b.png",u={},r=e(`<h1 id="creating-plugins" tabindex="-1"><a class="header-anchor" href="#creating-plugins" aria-hidden="true">#</a> Creating plugins</h1><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>This is written in a tutorial-like style. Skip to next sections for raw documentation.</p></div><h2 id="basic-template" tabindex="-1"><a class="header-anchor" href="#basic-template" aria-hidden="true">#</a> Basic template</h2><p>Create new .net standard project in Visual Studio or using command line:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dotnet new classlib <span class="token parameter variable">-f</span> netstandard2.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),k={href:"https://www.nuget.org/packages/StreamCompanionTypes/",target:"_blank",rel:"noopener noreferrer"},d=e(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Project</span> <span class="token attr-name">Sdk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Microsoft.NET.Sdk<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TargetFramework</span><span class="token punctuation">&gt;</span></span>netstandard2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TargetFramework</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Nullable</span><span class="token punctuation">&gt;</span></span>enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Nullable</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppendTargetFrameworkToOutputPath</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AppendTargetFrameworkToOutputPath</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>StreamCompanionTypes<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8.0.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Rename <code>Class1</code> that got created by default to some meaningful name(<code>MyPlugin</code>) and implement base <code>IPlugin</code> interface:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Interfaces</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">newTestPlugin</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPlugin</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPlugin</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Description <span class="token operator">=&gt;</span> <span class="token string">&quot;my plugin description&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=&gt;</span> <span class="token string">&quot;my plugin name&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Author <span class="token operator">=&gt;</span> <span class="token string">&quot;my name&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Url <span class="token operator">=&gt;</span> <span class="token string">&quot;Plugin homepage url(github/site)&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>At this point this project could get compiled and ran by StreamCompanion, but what is the point if it does nothing? Lets make it log something at startup:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Interfaces</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Enums</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Interfaces<span class="token punctuation">.</span>Services</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">newTestPlugin</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPlugin</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPlugin</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Description <span class="token operator">=&gt;</span> <span class="token string">&quot;my plugin description&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=&gt;</span> <span class="token string">&quot;my plugin name&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Author <span class="token operator">=&gt;</span> <span class="token string">&quot;my name&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Url <span class="token operator">=&gt;</span> <span class="token string">&quot;Plugin homepage url(github/site)&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token function">MyPlugin</span><span class="token punctuation">(</span><span class="token class-name">ILogger</span> logger<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Message from $</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Name</span><span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span><span class="token punctuation">,</span> LogLevel<span class="token punctuation">.</span>Trace<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our plugin now requests <code>ILogger</code> <strong>Service</strong> at startup from StreamCompanion and uses it to log our message.<br> Lets see it in action: Build whole solution, copy everything from <code>bin\\Debug\\netstandard2.1</code> in solution folder to StreamCompanion <code>plugins</code> folder. It should be loaded along with log message logged.<br> That&#39;s cool and all but this copying and manual running will get old and annoying really quick - so we need to automate things a bit.</p><h2 id="testing-enviroment" tabindex="-1"><a class="header-anchor" href="#testing-enviroment" aria-hidden="true">#</a> Testing enviroment</h2><p>Create an empty folder with 2 directories inside:</p><ul><li><code>newTestPlugin</code> - folder with your plugin project, its name doesn&#39;t matter.</li><li><code>SCInstall</code> - folder with installed/portable SC. Existing installation can be just copied over.</li></ul><p>Add <code>OutputPath</code> to your project configuration:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Project</span> <span class="token attr-name">Sdk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Microsoft.NET.Sdk<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TargetFramework</span><span class="token punctuation">&gt;</span></span>netstandard2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TargetFramework</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Nullable</span><span class="token punctuation">&gt;</span></span>enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Nullable</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppendTargetFrameworkToOutputPath</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AppendTargetFrameworkToOutputPath</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputPath</span><span class="token punctuation">&gt;</span></span>..\\SCInstall\\Plugins\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OutputPath</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>StreamCompanionTypes<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8.0.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Inside your solution folder create <code>Properties</code> folder with <code>launchSettings.json</code> inside and populate it with:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;profiles&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;newTestPlugin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;commandName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Executable&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;executablePath&quot;</span><span class="token operator">:</span> <span class="token string">&quot;..\\\\osu!StreamCompanion.exe&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Replace <code>newTestPlugin</code> with name of your project(not class name!)</p><p>With that done, your plugin can be now easily tested and debugged without ever leaving Visual Studio - Start debugging (Debug-&gt;Start debugging at the top menu) to test any changes.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Project with everything mentioned so far can be found <a href="../../misc/PluginProject.zip">here</a> and can be used as a template. Remember to change namespace and plugin class name!</p></div><h2 id="interacting-with-events" tabindex="-1"><a class="header-anchor" href="#interacting-with-events" aria-hidden="true">#</a> Interacting with events</h2><p><code>CreateTokensAsync</code>(from <a href="#itokenssource"><code>ITokensSource</code></a>) &amp; <code>SetNewMapAsync</code>(from <a href="#imapdataconsumer"><code>IMapDataConsumer</code></a>) are 2 hooks you&#39;ll most likely want to use. Code below demonstrates how to:</p><ul><li>request multiple services from SC and store these for later use (lines 19-27)</li><li>create&amp;update tokens (lines 31-41).</li><li>store persistent settings between runs (lines 22 and 38).</li><li>use final event data(tokens/map search result) (lines 43-56).</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Interfaces</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Enums</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Interfaces<span class="token punctuation">.</span>Services</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Interfaces<span class="token punctuation">.</span>Consumers</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Interfaces<span class="token punctuation">.</span>Sources</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>DataTypes</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">newTestPlugin</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPlugin</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPlugin</span><span class="token punctuation">,</span> <span class="token class-name">ITokensSource</span><span class="token punctuation">,</span> <span class="token class-name">IMapDataConsumer</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Description <span class="token operator">=&gt;</span> <span class="token string">&quot;my plugin description&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=&gt;</span> <span class="token string">&quot;my plugin name&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Author <span class="token operator">=&gt;</span> <span class="token string">&quot;my name&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Url <span class="token operator">=&gt;</span> <span class="token string">&quot;Plugin homepage url(github/site)&quot;</span><span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token class-name">ISettings</span> Settings<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">ILogger</span> Logger<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Tokens<span class="token punctuation">.</span>TokenSetter</span> tokenSetter<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ConfigEntry</span> lastMapConfigEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConfigEntry</span><span class="token punctuation">(</span><span class="token string">&quot;myConfigName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;defaultValue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token function">MyPlugin</span><span class="token punctuation">(</span><span class="token class-name">ISettings</span> settings<span class="token punctuation">,</span> <span class="token class-name">ILogger</span> logger<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Settings <span class="token operator">=</span> settings<span class="token punctuation">;</span>
            Logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
            tokenSetter <span class="token operator">=</span> Tokens<span class="token punctuation">.</span><span class="token function">CreateTokenSetter</span><span class="token punctuation">(</span><span class="token string">&quot;MyPlugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Logger<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>settings<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>lastMapConfigEntry<span class="token punctuation">)</span><span class="token punctuation">,</span> LogLevel<span class="token punctuation">.</span>Trace<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">CreateTokensAsync</span><span class="token punctuation">(</span><span class="token class-name">IMapSearchResult</span> map<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//do: update token values</span>
            <span class="token comment">//do: execute actions based on map search results</span>
            <span class="token comment">//don&#39;t: execute actions based on token values from other plugins</span>

            <span class="token function">tokenSetter</span><span class="token punctuation">(</span><span class="token string">&quot;someTokenName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;token value&quot;</span><span class="token punctuation">,</span> TokenType<span class="token punctuation">.</span>Normal<span class="token punctuation">,</span> <span class="token string">&quot;{0}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;default value&quot;</span><span class="token punctuation">,</span> OsuStatus<span class="token punctuation">.</span>Playing <span class="token operator">|</span> OsuStatus<span class="token punctuation">.</span>Watching<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Settings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>lastMapConfigEntry<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> map<span class="token punctuation">.</span>MapSearchString<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Logger<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;CreateTokensAsync&quot;</span><span class="token punctuation">,</span> LogLevel<span class="token punctuation">.</span>Trace<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">SetNewMapAsync</span><span class="token punctuation">(</span><span class="token class-name">IMapSearchResult</span> map<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//do: execute actions based on token values</span>
            <span class="token comment">//don&#39;t: update token values(unless these are live)</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span>PlayMode <span class="token operator">==</span> CollectionManager<span class="token punctuation">.</span>Enums<span class="token punctuation">.</span>PlayMode<span class="token punctuation">.</span>Osu <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span>BeatmapsFound<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> beatmap <span class="token operator">=</span> map<span class="token punctuation">.</span>BeatmapsFound<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> starRating <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>Tokens<span class="token punctuation">.</span>AllTokens<span class="token punctuation">[</span><span class="token string">&quot;mStars&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            Logger<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;SetNewMapAsync&quot;</span><span class="token punctuation">,</span> LogLevel<span class="token punctuation">.</span>Trace<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For more understanding when these methods are executed proceed to next section.</p><h2 id="creating-settings-gui" tabindex="-1"><a class="header-anchor" href="#creating-settings-gui" aria-hidden="true">#</a> Creating settings GUI</h2><p>In order to create user interface for settings, we will have to do few small modifications to the project. Namely:</p><ul><li>Use net6.0-windows instead of net standard</li><li>Specify that we want to use winForms, which is current way of adding settings GUI</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Project</span> <span class="token attr-name">Sdk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Microsoft.NET.Sdk<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TargetFramework</span><span class="token punctuation">&gt;</span></span>net5.0-windows<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TargetFramework</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Nullable</span><span class="token punctuation">&gt;</span></span>enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Nullable</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppendTargetFrameworkToOutputPath</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AppendTargetFrameworkToOutputPath</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UseWindowsForms</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>UseWindowsForms</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputPath</span><span class="token punctuation">&gt;</span></span>..\\SCInstall\\Plugins\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OutputPath</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>StreamCompanionTypes<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8.0.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Create new UserControl in the project by right clicking on project name, Add &amp; New item. From the list select UserControl and name it. We&#39;ll name it <code>SettingsUserControl</code> for this plugin.</p><p><img src="`+i+`" alt="Project add new item"></p><p>Now that we have UserControl in our plugin lets provide it to StreamCompanion by implementing <code>ISettingsSource</code>:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Interfaces</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Enums</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Interfaces<span class="token punctuation">.</span>Services</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Interfaces<span class="token punctuation">.</span>Sources</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">newTestPlugin</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPlugin</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPlugin</span><span class="token punctuation">,</span> <span class="token class-name">ISettingsSource</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Description <span class="token operator">=&gt;</span> <span class="token string">&quot;my plugin description&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=&gt;</span> <span class="token string">&quot;my plugin name&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Author <span class="token operator">=&gt;</span> <span class="token string">&quot;my name&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Url <span class="token operator">=&gt;</span> <span class="token string">&quot;Plugin homepage url(github/site)&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> SettingGroup <span class="token operator">=&gt;</span> <span class="token string">&quot;myGroupName&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">SettingsUserControl</span> SettingsUserControl<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token function">MyPlugin</span><span class="token punctuation">(</span><span class="token class-name">ILogger</span> logger<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Message from </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Name</span><span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span><span class="token punctuation">,</span> LogLevel<span class="token punctuation">.</span>Trace<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Free</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            SettingsUserControl<span class="token punctuation">?.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">GetUiSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>SettingsUserControl <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> SettingsUserControl<span class="token punctuation">.</span>IsDisposed<span class="token punctuation">)</span>
                SettingsUserControl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SettingsUserControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> SettingsUserControl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>First we have to provide <code>SettingGroup</code> with will be used as group name in settings tabs. As for 2 methods:</p><ul><li><code>GetUiSettings()</code> - This should be used for initalizing your userControl. Every time user navigates to your <code>SettingGroup</code> this will get called.</li><li><code>Free()</code> - Destroy UserControl instance and do any other necessary cleanup work. Every time user navigates away from your <code>SettingGroup</code> this will get called.</li></ul><p>With that done it&#39;s now up to you, to decide how you want to handle/design your UserControl. I&#39;d suggest to either:</p>`,32),g=s("code",null,"ISettings",-1),m={href:"https://github.com/Piotrekol/StreamCompanion/blob/3b787fa1f8853384408a1cde40ddbcd7674aeb57/plugins/ModsHandler/ModParser.cs#L47-L59",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/Piotrekol/StreamCompanion/blob/e099ee0d6a75e56a0c1048c6640095a9aef2d2c0/plugins/Gamma/GammaPlugin.cs#L77-L90",target:"_blank",rel:"noopener noreferrer"};function b(h,y){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,s("p",null,[n("Open csproj file using Visual Studio and double click on your project name to open its configuration. Inside of it add reference to newest "),s("a",k,[n("StreamCompanionTypes nuget package"),t(a)]),n(":")]),d,s("ul",null,[s("li",null,[n("Pass "),g,n(" instance to user control and modify settings inside, "),s("a",m,[n("Example"),t(a)]),n(".")]),s("li",null,[n("Use events to pop any user setting changes back to main plugin class and handle it there, "),s("a",v,[n("Example"),t(a)]),n(".")])])])}const f=p(u,[["render",b],["__file","creating-a-plugin.html.vue"]]);export{f as default};
