"use strict";(self.webpackChunkStreamCompanion_docs=self.webpackChunkStreamCompanion_docs||[]).push([[551],{5069:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-517aa978",path:"/development/SC/creating-a-plugin.html",title:"Creating plugins",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Basic template",slug:"basic-template",children:[]},{level:2,title:"Testing enviroment",slug:"testing-enviroment",children:[]},{level:2,title:"Interacting with events",slug:"interacting-with-events",children:[]}],filePathRelative:"development/SC/creating-a-plugin.md",git:{updatedTime:1633016013e3,contributors:[{name:"Piotrekol",email:"4990365+Piotrekol@users.noreply.github.com",commits:1}]}}},7563:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var t=a(6252);const p=(0,t.uE)('<h1 id="creating-plugins" tabindex="-1"><a class="header-anchor" href="#creating-plugins" aria-hidden="true">#</a> Creating plugins</h1><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>This is written in a tutorial-like style. Skip to next section for raw documentation.</p></div><h2 id="basic-template" tabindex="-1"><a class="header-anchor" href="#basic-template" aria-hidden="true">#</a> Basic template</h2><p>Create new .net standard project in Visual Studio or using command line:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>dotnet new classlib -f netstandard2.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',5),e=(0,t.Uk)("Open csproj file using Visual Studio and double click on your project name to open its configuration. Inside of it add reference to newest "),o={href:"https://www.nuget.org/packages/StreamCompanionTypes/",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("StreamCompanionTypes nuget package"),l=(0,t.Uk)(":"),u=(0,t.uE)('<div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Project</span> <span class="token attr-name">Sdk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Microsoft.NET.Sdk<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TargetFramework</span><span class="token punctuation">&gt;</span></span>netstandard2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TargetFramework</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Nullable</span><span class="token punctuation">&gt;</span></span>enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Nullable</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppendTargetFrameworkToOutputPath</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AppendTargetFrameworkToOutputPath</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>StreamCompanionTypes<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8.0.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Project</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Rename <code>Class1</code> that got created by default to some meaningful name(<code>MyPlugin</code>) and implement base <code>IPlugin</code> interface:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Interfaces</span><span class="token punctuation">;</span>\n\n<span class="token keyword">namespace</span> <span class="token namespace">newTestPlugin</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPlugin</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPlugin</span></span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Description <span class="token operator">=&gt;</span> <span class="token string">&quot;my plugin description&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=&gt;</span> <span class="token string">&quot;my plugin name&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Author <span class="token operator">=&gt;</span> <span class="token string">&quot;my name&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Url <span class="token operator">=&gt;</span> <span class="token string">&quot;Plugin homepage url(github/site)&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>At this point this project could get compiled and ran by StreamCompanion, but what is the point if it does nothing? Lets make it log something at startup:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Interfaces</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Enums</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Interfaces<span class="token punctuation">.</span>Services</span><span class="token punctuation">;</span>\n\n<span class="token keyword">namespace</span> <span class="token namespace">newTestPlugin</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPlugin</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPlugin</span></span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Description <span class="token operator">=&gt;</span> <span class="token string">&quot;my plugin description&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=&gt;</span> <span class="token string">&quot;my plugin name&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Author <span class="token operator">=&gt;</span> <span class="token string">&quot;my name&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Url <span class="token operator">=&gt;</span> <span class="token string">&quot;Plugin homepage url(github/site)&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token function">MyPlugin</span><span class="token punctuation">(</span><span class="token class-name">ILogger</span> logger<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            logger<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Message from $</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Name</span><span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span><span class="token punctuation">,</span> LogLevel<span class="token punctuation">.</span>Trace<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>Our plugin now requests <code>ILogger</code> <strong>Service</strong> at startup from StreamCompanion and uses it to log our message.<br> Lets see it in action: Build whole solution, copy everything from <code>bin\\Debug\\netstandard2.1</code> in solution folder to StreamCompanion <code>plugins</code> folder. It should be loaded along with log message logged.<br> That&#39;s cool and all but this copying and manual running will get old and annoying really quick - so we need to automate things a bit.</p><h2 id="testing-enviroment" tabindex="-1"><a class="header-anchor" href="#testing-enviroment" aria-hidden="true">#</a> Testing enviroment</h2><p>Create an empty folder with 2 directories inside:</p><ul><li><code>newTestPlugin</code> - folder with your plugin project, its name doesn&#39;t matter.</li><li><code>SCInstall</code> - folder with installed/portable SC. Existing installation can be just copied over.</li></ul><p>Add <code>OutputPath</code> to your project configuration:</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Project</span> <span class="token attr-name">Sdk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Microsoft.NET.Sdk<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TargetFramework</span><span class="token punctuation">&gt;</span></span>netstandard2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TargetFramework</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Nullable</span><span class="token punctuation">&gt;</span></span>enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Nullable</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppendTargetFrameworkToOutputPath</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AppendTargetFrameworkToOutputPath</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputPath</span><span class="token punctuation">&gt;</span></span>..\\SCInstall\\Plugins\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OutputPath</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>StreamCompanionTypes<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8.0.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Project</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Inside your solution folder create <code>Properties</code> folder with <code>launchSettings.json</code> inside and populate it with:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;profiles&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;newTestPlugin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;commandName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Executable&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;executablePath&quot;</span><span class="token operator">:</span> <span class="token string">&quot;..\\\\osu!StreamCompanion.exe&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Replace <code>newTestPlugin</code> with name of your project(not class name!)</p><p>With that done, your plugin can be now easily tested and debugged without ever leaving Visual Studio - Start debugging (Debug-&gt;Start debugging at the top menu) to test any changes.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Project with everything mentioned so far can be found <a href="/misc/PluginProject.zip">here</a> and can be used as a template. Remember to change namespace and plugin class name!</p></div><h2 id="interacting-with-events" tabindex="-1"><a class="header-anchor" href="#interacting-with-events" aria-hidden="true">#</a> Interacting with events</h2><p><code>CreateTokensAsync</code>(from <a href="#itokenssource"><code>ITokensSource</code></a>) &amp; <code>SetNewMapAsync</code>(from <a href="#imapdataconsumer"><code>IMapDataConsumer</code></a>) are 2 hooks you&#39;ll most likely want to use. Code below demonstrates how to:</p><ul><li>request multiple services from SC and store these for later use (lines 19-27)</li><li>create&amp;update tokens (lines 31-41).</li><li>store persistent settings between runs (lines 22 and 38).</li><li>use final event data(tokens/map search result) (lines 43-56).</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Interfaces</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Enums</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Interfaces<span class="token punctuation">.</span>Services</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Interfaces<span class="token punctuation">.</span>Consumers</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>Interfaces<span class="token punctuation">.</span>Sources</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">StreamCompanionTypes<span class="token punctuation">.</span>DataTypes</span><span class="token punctuation">;</span>\n\n<span class="token keyword">namespace</span> <span class="token namespace">newTestPlugin</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPlugin</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPlugin</span><span class="token punctuation">,</span> <span class="token class-name">ITokensSource</span><span class="token punctuation">,</span> <span class="token class-name">IMapDataConsumer</span></span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Description <span class="token operator">=&gt;</span> <span class="token string">&quot;my plugin description&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=&gt;</span> <span class="token string">&quot;my plugin name&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Author <span class="token operator">=&gt;</span> <span class="token string">&quot;my name&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Url <span class="token operator">=&gt;</span> <span class="token string">&quot;Plugin homepage url(github/site)&quot;</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">private</span> <span class="token class-name">ISettings</span> Settings<span class="token punctuation">;</span>\n        <span class="token keyword">private</span> <span class="token class-name">ILogger</span> Logger<span class="token punctuation">;</span>\n        <span class="token keyword">private</span> <span class="token class-name">Tokens<span class="token punctuation">.</span>TokenSetter</span> tokenSetter<span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ConfigEntry</span> lastMapConfigEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConfigEntry</span><span class="token punctuation">(</span><span class="token string">&quot;myConfigName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;defaultValue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token function">MyPlugin</span><span class="token punctuation">(</span><span class="token class-name">ISettings</span> settings<span class="token punctuation">,</span> <span class="token class-name">ILogger</span> logger<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            Settings <span class="token operator">=</span> settings<span class="token punctuation">;</span>\n            Logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>\n            tokenSetter <span class="token operator">=</span> Tokens<span class="token punctuation">.</span><span class="token function">CreateTokenSetter</span><span class="token punctuation">(</span><span class="token string">&quot;MyPlugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            Logger<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>settings<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>lastMapConfigEntry<span class="token punctuation">)</span><span class="token punctuation">,</span> LogLevel<span class="token punctuation">.</span>Trace<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">CreateTokensAsync</span><span class="token punctuation">(</span><span class="token class-name">IMapSearchResult</span> map<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token comment">//do: update token values</span>\n            <span class="token comment">//do: execute actions based on map search results</span>\n            <span class="token comment">//don&#39;t: execute actions based on token values from other plugins</span>\n\n            <span class="token function">tokenSetter</span><span class="token punctuation">(</span><span class="token string">&quot;someTokenName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;token value&quot;</span><span class="token punctuation">,</span> TokenType<span class="token punctuation">.</span>Normal<span class="token punctuation">,</span> <span class="token string">&quot;{0}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;default value&quot;</span><span class="token punctuation">,</span> OsuStatus<span class="token punctuation">.</span>Playing <span class="token operator">|</span> OsuStatus<span class="token punctuation">.</span>Watching<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            Settings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>lastMapConfigEntry<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> map<span class="token punctuation">.</span>MapSearchString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            Logger<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;CreateTokensAsync&quot;</span><span class="token punctuation">,</span> LogLevel<span class="token punctuation">.</span>Trace<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">SetNewMapAsync</span><span class="token punctuation">(</span><span class="token class-name">IMapSearchResult</span> map<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token comment">//do: execute actions based on token values</span>\n            <span class="token comment">//don&#39;t: update token values(unless these are live)</span>\n\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span>PlayMode <span class="token operator">==</span> CollectionManager<span class="token punctuation">.</span>Enums<span class="token punctuation">.</span>PlayMode<span class="token punctuation">.</span>Osu <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span>BeatmapsFound<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                <span class="token class-name"><span class="token keyword">var</span></span> beatmap <span class="token operator">=</span> map<span class="token punctuation">.</span>BeatmapsFound<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token class-name"><span class="token keyword">var</span></span> starRating <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>Tokens<span class="token punctuation">.</span>AllTokens<span class="token punctuation">[</span><span class="token string">&quot;mStars&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            Logger<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;SetNewMapAsync&quot;</span><span class="token punctuation">,</span> LogLevel<span class="token punctuation">.</span>Trace<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div><p>For more understanding when these methods are executed proceed to next section.</p>',21),i={render:function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("p",null,[e,(0,t._)("a",o,[c,(0,t.Wm)(a)]),l]),u],64)}}}}]);